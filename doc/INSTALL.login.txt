

/*

    Copyright 1999-2001, University of Washington.  All rights reserved.

     ____        _                     _    _
    |  _ \ _   _| |__   ___ ___   ___ | | _(_) ___
    | |_) | | | | '_ \ / __/ _ \ / _ \| |/ / |/ _ \
    |  __/| |_| | |_) | (_| (_) | (_) |   <| |  __/
    |_|    \__,_|_.__/ \___\___/ \___/|_|\_\_|\___|


    Created by the Pubcookie Team

    Comments and suggestions:
	Internal to U. of Washington: pubcookie@cac.washington.edu
	External to U. of Washington: pubcookie-ext@cac.washington.edu
    Pubcookie on the Web: http://www.washington.edu/computing/pubcookie/

    this is installation documentation for the login sever

 */

/*
    $Id: INSTALL.login.txt,v 1.8 2001-12-13 03:40:32 willey Exp $
 */


1. Introduction

The Pubcookie login server has two primary functions: to authenticate
users and to issue authentication tokens (granting cookies) consumed by
Pubcookie-enabled target application servers.  Authentication occurs
either by checking user-provided credentials via a backend authentication
service (Kerberos, SecurID, ...) or by verifying a token that was created
on a previous visit to the login server.  Example code to interface to an
authentication system is provided.

2. Implementation

The Pubcookie login server uses a CGI program to handle all HTTP requests.
This CGI program, hereafter referred to as "the login cgi" or "index.cgi",
is compiled from C and is the only Pubcookie active component on the login
server. The login cgi displays the web page where users are asked to enter
authentication credentials as well as other web pages that display error
messages.

Due to the important nature of the Pubcookie login server, the only other
services that should be run on the same system are those which receive an
equally high level of scrutiny for security.  As deployed at the
University of Washington, the Pubcookie login server is powered by the
Apache web server software. Other web server software which supports CGI
and SSL should also work, but this supposition has not been tested.

3. Authentication services

The login cgi has a very simple interface for talking to backend
authentication services. There is a sample authentication module provided.
Additionally there is a module for Kerberos 5. Internal support for
multiple and various authentication services is not very flexible and will
be revised and developed further in the future.

Note: Until the authentication module build structure and the credential
choice mechanism is redone the University of Washington SecurID
authentication module is included.  This interface is only designed to
talk to a non-standard SecurID server. We realize that it's confusing, and
perhaps misleading. But this code shouldn't cause problems; even if there
are requests for SecurID credentials, the login cgi will fail politely.

4. Localization

The design of the login cgi preceded consideration of external use of
Pubcookie, so there is much work to be done to improve flexibility and
make it less specific to the University of Washington. As it stands, the
login cgi must be modified for each environment.

First, index.cgi.c uses a mix of Kerberos and SecurID authentication,
depending on the type of authentication requested. These types are defined
in pbc_config.h and implemented in two authentication modules,
index.cgi_krb.c and index.cgi_securid.c, respectively. Localization of the
login cgi will require replacing this code or adding similar code for a
new type of authentication. We are grateful to Russell Tokuyama for
contributing a write-up and sample code used to modify Pubcookie to use
LDAP for authentication at the University of Hawaii. This work can be
found in the contrib directory, within index.cgi_ldap; read
login-server-ldap.txt and then read pubcookie_ldap_modifications.txt to
learn a possible shortcut.

Additionally, pbc_config.h defines macros for the URL of the login server,
the domain of the organization, and other site specific stuff.  
index.cgi.h defines macros for the location of HTML templates, error
messages, and an ok_browsers file. They need to be localized as well.

5. Compiling

Note: it is assumed you have already set up a system running Apache with 
mod_ssl and have noted the location where OpenSSL is installed.

Makefile.index.cgi is for making the login cgi and Makefile is for
miscellaneous tools, most importantly the tools used to generate keys for
target application servers.

The login cgi uses the CGIC library for some functions.  This library is
included with the Pubcookie distribution.  Pubcookie uses a modified CGIC
library.  Currently cgic comes in a separate tar file and is compiled
separately.  The Pubcookie modifications should not affect other expected
uses of cgic, the modifications simply make some cgic-internal functions
available externally.
 
To compile cgic, untar the pubcookie_cgic.tar.gz into a separate
directory. Check the Makefile for installation specific stuff and type
'make'.  libcgic.a and cgic.h can be put in the pubcookie install
directory or other locations you please.

Once cgic is compiled, build index.cgi with Makefile.index.cgi

Then build the key management tools with Makefile. You'll need these tools
later.

6. Setup: User agent blocking via ok_browsers file

index.cgi.h defines the location of a ok_browsers file.  The idea behind
ok_browsers is to block browsers that either have a known security flaw
(i.e. don't forget cookies when they should) or don't work with Pubcookie
(i.e. Opera which doesn't do domain level cookie scoping correctly).  IE
and Netscape are the only two browser families that are known to work with
Pubcookie.

So far we've been too chicken to really use the 'ok_browsers'
functionality to block browsers that we know don't work.  For now our
ok_browsers has a single line: "Mozilla". Since both Netscape and IE claim
to be Mozilla that covers the only two browsers known to work with
Pubcookie. Proceed according to your own policy.

7. More setup: Key pairs for signing and verifying cookies

pbc_config.h defines the location of two key pairs used to sign and verify
login cookies and granting cookies.  The filenames may be either statically 
defined file names or built from a directory, prefix, and the hostname.  
The default is filenames that are built from the host name.  

for hostname based filenames you will need to verify the following 
defines:

#define PBC_KEY_DIR "/usr/local/pubcookie/"
#define PBC_L_PUBKEY_FILE_PREFIX "pubcookie_login_cert"
#define PBC_L_PRIVKEY_FILE_PREFIX "pubcookie_login_key"
#define PBC_G_PRIVKEY_FILE_PREFIX "pubcookie_granting_key"

If you'd prefer statically defined filenames you need to compile with
NO_HOST_BASED_KEY_FILENAMES set and set the following defines:

#define PBC_L_CERTFILE "/usr/local/pubcookie/pubcookie_login.cert"
#define PBC_L_KEYFILE "/usr/local/pubcookie/pubcookie_login.key"
#define PBC_G_CERTFILE "/usr/local/pubcookie/pubcookie_granting.cert"
#define PBC_G_KEYFILE "/usr/local/pubcookie/pubcookie_granting.key"

These key pairs can be generated with the openssl command line tool. For
example:

% openssl req -new -x509 -nodes -out pubcookie_login.cert -newkey rsa:1024
-keyout pubcookie_login.key

And:

% openssl req -new -x509 -nodes -out pubcookie_granting.cert -newkey 
rsa:1024 -keyout pubcookie_granting.key

These key pairs only need to be generated once. PBC_L_CERTFILE,
PBC_L_KEYFILE, and PBC_G_KEYFILE all reside on the login server.  A copy
of PBC_G_CERTFILE must be installed with Pubcookie on target application
servers, which also need to generate their own keys to sign and verify
their own session cookies.

8. More setup: DES Encryption key / Key management (as it is)

The DES encryption key is a shared key that is hashed on a per host 
basis.  Each host that plays the pubcookie game will hav a key file 
that can only be used on that host.  This key is referred to as the 
encryption key or the c_key.

Like the public key files the DES encryption key filename may be either 
statically defined or built from a directory, prefix, and the hostname.
The default is a filename built from the host name.

For a hostname based encryption key filename define:

#define PBC_KEY_DIR "/usr/local/pubcookie/"
#define PBC_CRYPT_KEY_PREFIX "c_key"

If you'd prefer a statically defined filename you need to compile with
NO_HOST_BASED_KEY_FILENAMES set and set the following defines

#define PBC_CRYPT_KEYFILE "/usr/local/pubcookie/c_key"

***********
***********
*********** There is also 
***********
***********#define PBC_MASTER_CRYPT_KEYFILE "/usr/local/pubcookie/m_key"


For a new pubcookie installation you will need a source of DES keys to base 
others on.  Use the pbc_key_generic utility to generate this master key 
(m_key).  This program simply spits the correct amount of random bits to 
standard out. 

% pbc_key_generic > m_key

Put this master key in the location defined by PBC_MASTER_CRYPT_KEYFILE.

Now use the pbc_key_local utility to hash the master key to the primary
IP address of your login server and create the localized copy:

% pbc_key_local -a 209.211.239.212 > c_key

Current key management in Pubcookie is a simple shared key (m_key) hashed
to each participating host's primary IP address. There is no current
mechanism for revoking a key or forcing new keys to be generated.

Note: Use the pbc_key_local utility to create a localized key (c_key)  
for each target application server based on its primary IP address. If you 
are not installing Pubcookie on target application servers, be prepared 
for requests from sysadmins for c_key files.

9. Ancillary tools

Tools that you need for key management:
pbc_key_local - 'localizes' master crypt key for a specific host (ip).
pbc_key_generic - Makes a blob of bits that can be used for a master c_key.

Tool rarely used for debugging:
test_local_c_key

Old Tools That Might Be Handy for Debugging:

pbc_create - creates a pubcookie cookie, convenient for creating cookies 
ad hoc.  Arguments come in via stdin and the cookie is put out on stdout. 
Args are space delimited, and in order: user appsrvid appid type creds 
serial crypt_file cert_key_file.  Anything too big is just truncated, 
no support for defaults or anything like that.  See src for details.

pbc_verify - decrypts/verifies/displays pubcookie cookies, convenient for
'unbundling' a cookie and seeing what's inside.  The arguments come in on
the command line, the cookie comes in on stdid, and the contents are 
dumped to stdout.  The required argument is cookie_type and the optional 
arguments are encryption_key and cert_file.

As an example you can use these two programs to do things like:

# echo "willey appsrvid appid 1 2 23 /usr/local/pubcookie/c_key /usr/local/pubcookie/test.key" | ./pbc_create | ./pbc_verify 1 /usr/local/pubcookie/c_key /usr/local/pubcookie/test.cert

and get something like

user: willey
version: a5
type: 1
creds: 2
serial: 23
appsrvid: appsrvid
appid: appid
create_ts: 1006986719
last_ts: 1006986719


M. Testing Crypt Keys

N. Choosing the location of your login page

Depending on your instalation environment you may choose to install the 
login server in a number of configurations.  Two general models are presented
here with any necessary Apache configuration directives. 

N.1. 

For a clean looking login URLThe apache config directive 'DirectoryIndex'
tells it how to handle requests for directories.

(see http://httpd.apache.org/docs/mod/mod_dir.html#directoryindex for more
info) tells it how to handle requests for directories.

It looks like apache is interpreting '/' as 'index.html'.  

Your DirectoryIndex line should look something like:
DirectoryIndex index.html index.cgi

Apache will choose the first file it finds.  So, you don't want an
index.html file in the same directory as index.cgi unless you change the
order.

There are other ways to deal with this but I think this is the most
straight forward.

N.2. Explicit specification of login cgi

The login CGI is not name dependant and can be deployed as index.cgi, 
login.cgi, or some other CGI file if you like.  In can also be put in 
any subdirectory you wish.

Your login server's URL could be something like:

  https://www.myuniversity.edu/cgi-bin/login.cgi

Some sites may do this avoid the confusion with the default index page.

Depending how you want to configure things with Apache or which ever Web
server you want to use for the login server, your login server URL could
be something like:

  https://www.myuniversity.edu/login

where /login is mapped to the CGI program (index.cgi or whatever you
rename it to).


