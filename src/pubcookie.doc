
Basic pubcookie documentation containing a rough overview and installation
instructions.

For more documentation please see:
	http://veil.cac.washington.edu/pubcookie

Introduction
------------
This package attempts to provide a system for transferring authentication
information across multiple web servers.  It was designed to fill a need
at the University of Washington.  At the time of its design, many
university web servers relied on domain name/ip address for
authentication and authorization.  This system was breaking down due to
the ever expanding population of users who were authorized to use
university resources.  The design goals for a replacement system were:

 * Transparent access to multiple web servers

 * Users should enter their passwords on web pages as few times as possible

 * No modifications required per client

 * Functional across a large set of clients

 * Only minor modifications allowed on the server

 * Must be able to function with Apache, Netscape and Microsoft web
   servers

This solution address all of the above points.
This solution does not directly address the problem of authentication
although a few examples are given in the Login Server section.

This solution is based upon the Netscape cookie protocol 
(see http://home.netscape.com/newsref/std/cookie_spec.html).

In short, the solution is:

 1) User authenticates to a login server
 2) The login server sends signed cookies to client
 3) The client uses one of the the cookies to authenticate itself to local servers.
 4) The local server issues its own cookie that the client send with each request.
 
Client Requirements
-------------------
Clients need to understand the Netscape cookie protocol.  As
of now NS, IE and Lynx all support cookies.  Also, clients should 
allow javascript to run.

Server Requirements
-------------------
The server needs to be configured with a module that understands
this system.  At the moment there exists a module for Apache.  Modules
for Netscape servers are under consideration and for Microsoft
are being ported/developed

The server needs to have a copy of the public key that matches the private
key with which the login servers signs cookies.

Installation
------------

The apache module must be built with the APACHE1_3 option if apache
version 1.3.* is being used.

Apache Directives
-----------------

The Apache module can use the following directive to
modify its behaviour.

PubCookieInactiveExpire <seconds>
        The inactivity expire time for pubcookie logins.  The default is
        PBC_DEFAULT_INACT_EXPIRE defined in pbc_config.h.
PubCookieHardExpire <seconds>
        The hard expire time for pubcookie logins.  The default is
        PBC_DEFAULT_HARD_EXPIRE defined in pbc_config.h.
PubCookieLogin <url>
        The login page for pubcookie.  The default is PBC_LOGIN_PAGE
        defined in pbc_config.h.
PubCookieGrantingCertfile <file>
        The name of the certfile for Granting PubCookies.
PubCookieSessionKeyfile <file>
        The name of the keyfile for Session PubCookies.
PubCookieSessionCertfile <file>
        The name of the certfile for Session PubCookies.
PubCookieCryptKeyfile <file>
        The name of the encryption keyfile for PubCookies.
PubCookieAppID <app_name>
        The name of the application.
ForceReauth <url>
        Force the reauth loop through the login server.

Except for ForceReauth and PubCookieAppID these directives can only be used
in the configuration files outside of <Directory> or <Location>.

Keys and Certificates 
---------------------

To get keys and the login server certificate please send email to 
pubcookie@u.washington.edu with the IPs of the web server machines.

$Id: pubcookie.doc,v 1.4 1998-12-18 23:01:09 willey Exp $


