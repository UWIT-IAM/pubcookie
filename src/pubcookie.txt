
#include "pbc_config.h"

Basic pubcookie documentation containing a rough overview and installation
instructions.

For more documentation please see:
	http://veil.cac.washington.edu/pubcookie

Introduction
------------
This package attempts to provide a system for transferring authentication
information across multiple web servers.  It was designed to fill a need
at the University of Washington.  At the time of its design, many
university web servers relied on domain name/ip address for
authentication and authorization.  This system was breaking down due to
the ever expanding population of users who were authorized to use
university resources.  The design goals for a replacement system were:

 * Transparent access to multiple web servers

 * Users should enter their passwords on web pages as few times as possible

 * No modifications required per client

 * Functional across a large set of clients

 * Only minor modifications allowed on the server

 * Must be able to function with Apache, Netscape and Microsoft web
   servers

This solution address all of the above points.
This solution does not directly address the problem of authentication
although a few examples are given in the Login Server section.

This solution is based upon the Netscape cookie protocol 
(see http://home.netscape.com/newsref/std/cookie_spec.html).

In short, the solution is:

 1) User authenticates to a login server
 2) The login server sends signed cookies to client
 3) The client uses one of the the cookies to authenticate itself to local servers.
 4) The local server issues its own cookie that the client send with each request.
 
Client Requirements
-------------------
Clients need to understand the Netscape cookie protocol.  As
of now NS, IE and Lynx all support cookies.  Also, clients should 
allow javascript to run.

Server Requirements
-------------------
The server needs to be configured with a module that understands
this system.  At the moment there exists a module for Apache.  Modules
for Netscape servers are under consideration and for Microsoft
are being ported/developed

The server needs to have a copy of the public key that matches the private
key with which the login servers signs cookies.

Apache Module Distribution Contents
-----------------------------------

Makefile - makefile for test applications
Makefile.tmpl - makefile template for module 
README - most recent notes
pubcookie.txt - this document

Source files:
base64.c
candv.c
dtest.c
libpubcookie.c
libpubcookie.h
mod_pubcookie.c
pbc_config.h
pbc_version.h
pubcookie.h
test_local_c_key.c

Apache Module Installation Notes
--------------------------------

The apache server needs to have been built with SSL.  apache-ssl patches
and mod_ssl have all been tested with pubcookie.  SSLeay and 
openSSL have both been tested as sources for ssl libraries.

You will have to rely on Apache documentation or the documention
from the other packages for help on building them.

The module can be built either as a static module (the only option for
apache 1.2.x) or as a dso.  

A Makefile template is provided as Makefile.tmpl.

The apache module must be built with the APACHE1_3 option if apache
version 1.3.* is being used.

Basic steps are:

1 - Get and build apache (with mod_ssl or apache-ssl patches), ssleay 
(or openssl), and RSAref (as long and the patent lasts).
2 - Verify that apache with SSL builds and works before you add pubcookie.
3 - If you are compiling pubcookie as a DSO you will need to link ssleay (and
maybe RSAref) into axps (the apache DSO module builder).
4 - If you are building the pubcookie module as a DSO it doesn't matter
where you untar the distribution, if you are not then untar the distribution
where you would put other modules (like src/modules/pubcookie in 1.3.x)
5 - If you are using DSO, build the dso modules with axps.  if you are 
not using DSO move on to the next step.
6a - If you use the top level Configure script you will need to add
the options: "--activate-module=src/modules/pubcookie/mod_pubcookie.a --enable-module=pubcookie"
  or
6b - If you use src level Configure script add 
the module listing to the Configuration file and run the Configure scripts.
7 - If the Configuration goes file then you should be able to do a make
and eventually get an apache web daemon.
8 - A key/cert pairs should be generated for the server.
9 - A granting certificate and encryption key will have to be gotten
from pubcookie@u.
10 - Edit configuration files to add locations of key files etc.
11 - After getting keys and editting configuration you should be able to
start the server and use pubcookie

If are going to use apxs, after you install apache you should
look at /usr/local/apache/sbin/apxs and check the link line.  On the
alphas, you need to make sure CFG_LDFLAGS_SHLIB escapes the *.  An
example would be:

    my $CFG_LDFLAGS_SHLIB = '-shared -expect_unresolved "*" -s'; # substituted via Makefile.tmpl 

otherwise apxs will never be able to link.

Apache Module Version Requirements
----------------------------------

In general these requirements means that the pubcookie module has been 
tested to work with them.  Newer versions of the software may work but
have not been tested.

The apache mudule works with apache versions 1.2.6 through 1.3.3 (any newer 
versions haven't been tested).

SSLeay verion 0.9.0b is recommended.  0.8.0 has been tested and works.  
0.9.0 is not recommended.

mod_ssl version 2.1.6-1.3.3.

openssl version 0.9.1c.

If you need rsaref the only version that has been tested is version 2.0.


Where to Find Software
----------------------

Apache		http://www.apache.org
ssleay		http://www.ssleay.org
openssl		http://www.openssl.org
RSAref		see ftp://www.rsa.com/rsaref/README for the hoops you have to
                jump through to get the software
Apache-SSL	http://www.apache-ssl.org/
mod_ssl		http://www.engelschall.com/sw/mod_ssl

Sample .htaccess
----------------

This example uses ExternalAuthorize with is available on www.washington.edu.
Pubcookie does not do authorization.

AuthType UWNetID
PubCookieAppID "webinfo_Test_1"
ExternalAuthorize true
require user xxx

Currently UWNetID is the only authentication method available

Apache Directives
-----------------

The Apache module can use the following directive to
modify its behaviour.

PubCookieInactiveExpire <seconds>
        The inactivity expire time for pubcookie logins.  The default is
        PBC_DEFAULT_INACT_EXPIRE defined in pbc_config.h.
PubCookieHardExpire <seconds>
        The hard expire time for pubcookie logins.  The default is
        PBC_DEFAULT_HARD_EXPIRE defined in pbc_config.h.
PubCookieLogin <url>
        The login page for pubcookie.  The default is PBC_LOGIN_PAGE
        defined in pbc_config.h.
PubCookieGrantingCertfile <file>
        The name of the certfile for Granting PubCookies. The default is 
	PBC_G_CERTFILE defined in pbc_config.h.
PubCookieSessionKeyfile <file>
        The name of the keyfile for Session PubCookies. The default is 
	PBC_S_KEYFILE defined in pbc_config.h.
PubCookieSessionCertfile <file>
        The name of the certfile for Session PubCookies. The default is 
	PBC_S_CERTFILE defined in pbc_config.h.
PubCookieCryptKeyfile <file>
        The name of the encryption keyfile for PubCookies. The default is 
	PBC_CRYPT_KEYFILE defined in pbc_config.h.
PubCookieAppID <app_name>
        The name of the application.  The default is the directory path.
ForceReauth <url>
        Force the reauth loop through the login server.

ForceReauth, PubCookieAppID, PubCookieInactiveExpire, and PubCookieHardExpire 
can be used in .htaccess files.  All others can only be set in the 
configuration files outside of <Directory> or <Location>.

Keys and Certificates 
---------------------

To get the machine specific cookie crypt key and the granting cookie 
certificate please send email to pubcookie@u.washington.edu with the 
primary IP of the web server machines.

To create the session key/certificate pairs (PubCookieSessionKeyfile and 
PubCookieSessionCertfile):

      % ssleay req -new -x509 -nodes -out file-for-cert -key file-with-key

If you don't already have a key, you can use something like:

      % ssleay req -new -x509 -nodes -out file-for-cert -newkey rsa:1024 \
       -keyout file-for-key


Descriptions of Some Logged Error Messages
------------------------------------------

1999/01/05 14:54:19: PUBCOOKIE_DEBUG: libpbc_unbundle_cookie_p: sig verify failed

	This means that the integrity of the cookie could not be verifyied.  
	Which cookie?  The next logged message will tell you which cookie
	was being unbundled.  Two possible reasons for this failure are that 
	the granting certificate is incorrect (ask pubcookie@u to verify
	the certificate) or the crypt key is wrong (again ask pubcookie@u to 
	verify or regenerate you a key).

1999/01/05 14:52:03: PUBCOOKIE_DEBUG: pubcookie_user: can't unbundle granting cookie /sample_p
	
	This means that information was not extracted from the cookie.  The
	previously logged error message for this connection should show why
	the cookie was no good (couldn't be decrypted, too short, signature
	verifyication failed, etc.)

Platform/Architecture Specific Notes
------------------------------------

Systems with 64bit longs (alphas):

Patch to rsaref for systems with 64 bit longs.  in
src/global.h, line 26 needs to change from 'unsigned long int' to
'unsigned int':

    *** ../../src2.0/source/global.h        Fri Mar 25 11:01:46 1994
    --- global.h    Wed Oct 21 16:19:23 1998
    ***************
    *** 23,29 ****
    typedef unsigned short int UINT2;
    
    /* UINT4 defines a four byte word */
    ! typedef unsigned long int UINT4;
    
    #ifndef NULL_PTR
    #define NULL_PTR ((POINTER)0)
    --- 23,29 ----
    typedef unsigned short int UINT2;
    
    /* UINT4 defines a four byte word */
    ! typedef unsigned int UINT4;
    
    #ifndef NULL_PTR
    #define NULL_PTR ((POINTER)0)



$Id: pubcookie.txt,v 1.4 1999-01-11 21:47:43 willey Exp $


