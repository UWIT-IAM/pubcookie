////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  IIIIIII SSSSSS                                                            
//    II    SS                          InstallShield (R)                     
//    II    SSSSSS      (c) 1996-2000, InstallShield Software Corporation     
//    II        SS                     All rights reserved.             
//  IIIIIII SSSSSS                  
//                                                                            
//                                                                            
//  This template script provides the code necessary to build an entry-point 
//  function to be called in an InstallScript custom action. 
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//
////////////////////////////////////////////////////////////////////////////////

// Include Isrt.h for built-in InstallScript function prototypes.
#include "isrt.h"

// Include Iswi.h for Windows Installer API function prototypes and constants,
// and to declare code for the OnBegin and OnEnd events.
#include "iswi.h"

export prototype SetHostName(HWND); 
export prototype PrintVars(HWND); 
   
   
#define WSADESCRIPTION_LEN      256
#define WSASYS_STATUS_LEN       128

typedef
 WSAData
  begin
        INT                    wVersion;
        INT                    wHighVersion;
        STRING                 szDescription[WSADESCRIPTION_LEN+1];
        STRING                 szSystemStatus[WSASYS_STATUS_LEN+1];
        short                  iMaxSockets;
        short                  iMaxUdpDg;
        POINTER                lpVendorInfo;
end;
                
typedef  HostEnt
begin
        LPSTR    ph_name;           /* official name of host */
        POINTER    ph_aliases;        /* alias list */
        short      h_addrtype;        /* host address type */
        short      h_length;          /* length of address */
        POINTER    ph_addr_list;      /* list of addresses */
end;

typedef IPName
 begin
 STRING szIPAddr[100];
end;

typedef IPAddrList
 begin
 POINTER pIPAddr;
end;


typedef IPAddPtr
 begin
 LONG nIPAddr;
end;
   
typedef ServerName
  begin
            STRING svLocalString[500];
  end;


prototype POINTER wsock32.gethostbyname(BYREF STRING);
prototype POINTER wsock32.gethostname(BYREF STRING, NUMBER);
prototype POINTER wsock32.WSAStartup(INT, POINTER);
prototype POINTER wsock32.inet_ntoa( NUMBER);   
prototype POINTER wsock32.WSACleanup();
prototype int     wsock32.WSAGetLastError (   );
prototype NUMBER KERNEL32.RtlMoveMemory (POINTER, POINTER, NUMBER);

function PrintVars(hMSI)      
NUMBER count;  
STRING szProp;
begin  
count = 200;
MsiGetProperty(hMSI,"LOGINURI",szProp,count);
MessageBox(szProp,INFORMATION);

end;

function SetHostName(hMSI)   

HostEnt structHostEnt;
HostEnt POINTER pHostEnt;
SHORT nlen;
NUMBER nIPNetAddr;

NUMBER nVersion;
STRING szMsg;
STRING szDefault;
STRING szURL;
STRING szPath;
NUMBER nRC;
NUMBER nRC2;
STRING szHostName;
POINTER pWinSockReturn;
WSAData structWSAData;
WSAData POINTER pWSAData;   
IPName LocalIPName;
IPName  POINTER pLocalIPName; 
IPAddrList  structIPAddrList;
IPAddrList  POINTER pIPAddrList;
IPAddPtr  structIPAddPtr;
IPAddPtr  POINTER pIPAddPtr;  
POINTER pIN_Addr_Struct;
STRING szDNSName;
ServerName POINTER pszLocalString;
	
	
begin             
pWSAData = &structWSAData;

nRC = UseDLL ("wsock32.dll");
pWSAData -> wHighVersion = 1;
pWSAData -> wVersion     = 1;
nVersion =  0x02000002;   // can be 0x01000001 for Windows NT but Windows 95 requires the version 2 settings

pWinSockReturn = WSAStartup(nVersion, pWSAData);
pWinSockReturn = gethostname(szHostName,100);
pHostEnt       = gethostbyname(szHostName);  

if pHostEnt != 0 then
   pszLocalString = pHostEnt -> ph_name;
   szDNSName = pszLocalString -> svLocalString;
   MsiSetProperty(hMSI,"HOSTNAME",szDNSName) ;
endif;


WSACleanup();

end;


// To Do:  Handle initialization code when each sequence (User Interface and 
//         Execute) starts.
// function OnBegin()
// begin
// end;

// To Do:  Write clean-up code when each sequence (User Interface and Execute)
//         ends.
// function OnEnd()
// begin
// end;   

